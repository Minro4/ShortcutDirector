{
  "formatDocument": [
    "editor.action.formatDocument when editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor",
    "editor.action.formatDocument when editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly",
    "editor.action.formatDocument when editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly",
    "editor.action.formatDocument when editorHasDocumentFormattingProvider && editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor",
    "editor.action.formatDocument.none when editorTextFocus && !editorHasDocumentFormattingProvider && !editorHasDocumentFormattingProvider && !editorReadonly",
    "editor.action.formatDocument"
  ],
  "formatSelection": [
    "editor.action.formatSelection when editorHasDocumentSelectionFormattingProvider && editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
  ],
  "goToFile": ["workbench.action.quickOpen"],
  "renameFile": [
    "renameFile when explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  ],
  "renameSymbol": [
    "editor.action.rename when editorHasRenameProvider && editorTextFocus && !editorReadonly"
  ],
  "cutLine": [
    "filesExplorer.cut when explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus",
    "editor.action.clipboardCutAction"
  ],
  "copyLine": ["editor.action.clipboardCopyAction"],
  "deleteLine": [
    "editor.action.deleteLines when textInputFocus && !editorReadonly"
  ],
  "insertLineAbove": [
    "editor.action.insertLineBefore when editorTextFocus && !editorReadonly"
  ],
  "insertLineBelow": [
    "editor.action.insertLineAfter when editorTextFocus && !editorReadonly"
  ],
  "moveLineUp": [
    "editor.action.moveLinesUpAction when editorTextFocus && !editorReadonly"
  ],
  "moveLineDown": [
    "editor.action.moveLinesDownAction when editorTextFocus && !editorReadonly"
  ],
  "indent": [
    "tab when editorTextFocus && !editorReadonly && !editorTabMovesFocus"
  ],
  "outdent": [
    "outdent when editorTextFocus && !editorReadonly && !editorTabMovesFocus"
  ],
  "indentLine": [
    "editor.action.indentLines when editorTextFocus && !editorReadonly"
  ],
  "outdent line": [
    "editor.action.outdentLines when editorTextFocus && !editorReadonly"
  ],
  "find": ["actions.find when editorFocus || editorIsOpen"],
  "findNext": ["editor.action.nextMatchFindAction when editorFocus"],
  "findPrevious": ["editor.action.previousMatchFindAction when editorFocus"],
  "replace": [
    "editor.action.startFindReplaceAction when editorFocus || editorIsOpen"
  ],
  "toggleBreakpoint": [
    "editor.debug.action.toggleBreakpoint when debuggersAvailable && editorTextFocus"
  ],
  "start": [
    "workbench.action.debug.start when debuggersAvailable && !inDebugMode"
  ],
  "continue": ["workbench.action.debug.continue when inDebugMode"],
  "stopDebuging": ["workbench.action.debug.stop when inDebugMode"],
  "stepInto": ["workbench.action.debug.stepInto when debugState != 'inactive'"],
  "stepOut": ["workbench.action.debug.stepOut when debugState == 'stopped'"],
  "showHover": [
    "editor.debug.action.showDebugHover when editorTextFocus && inDebugMode"
  ],
  "newFile": ["workbench.action.files.newUntitledFile"],
  "openFile": ["workbench.action.files.openFile"],
  "save": ["workbench.action.files.save"],
  "saveAs": ["workbench.action.files.saveAs"],
  "saveAll": ["workbench.action.files.saveAll"],
  "close": ["workbench.action.closeActiveEditor"],
  "closeAll": ["workbench.action.closeAllEditors"],
  "duplicateSelection": ["editor.action.duplicateSelection"],
  "acceptSelectedSuggestion": [
    "acceptSelectedSuggestion when suggestWidgetVisible && textInputFocus"
  ],
  "editor.action.blockComment": [
    "editor.action.blockComment when editorTextFocus && !editorReadonly"
  ],
  "editor.action.commentLine": [
    "editor.action.commentLine when editorTextFocus && !editorReadonly"
  ],
  "editor.action.joinLines": ["editor.action.joinLines"],
  "editor.action.quickFix": [
    "editor.action.quickFix when editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
  ],
  "editor.action.smartSelect.grow": ["editor.action.smartSelect.grow"],
  "editor.action.smartSelect.shrink": [
    "editor.action.smartSelect.shrink when editorTextFocus"
  ],
  "editor.fold": ["editor.fold when editorTextFocus && foldingEnabled"],
  "editor.foldAll": ["editor.foldAll when editorTextFocus && foldingEnabled"],
  "editor.action.goToDeclaration": ["editor.action.goToDeclaration"],
  "editor.action.goToImplementation": [
    "editor.action.goToImplementation when editorHasImplementationProvider && editorTextFocus && !isInEmbeddedEditor"
  ],
  "editor.action.previewDeclaration": ["editor.action.previewDeclaration"],
  "editor.action.marker.next": ["editor.action.marker.next when editorFocus"],
  "editor.action.marker.prev": ["editor.action.marker.prev when editorFocus"],
  "workbench.action.gotoLine": ["workbench.action.gotoLine"],
  "workbench.action.gotoSymbol": ["workbench.action.gotoSymbol"],
  "workbench.action.navigateBack": ["workbench.action.navigateBack"],
  "workbench.action.navigateForward": ["workbench.action.navigateForward"],
  "workbench.action.navigateToLastEditLocation": [
    "workbench.action.navigateToLastEditLocation"
  ],
  "workbench.action.nextEditor": ["workbench.action.nextEditor"],
  "editor.action.copyLinesDownAction": [
    "editor.action.copyLinesDownAction when editorTextFocus && !editorReadonly"
  ],
  "deleteWordLeft": ["deleteWordLeft when textInputFocus && !editorReadonly"],
  "deleteWordRight": ["deleteWordRight when textInputFocus && !editorReadonly"],
  "editor.action.changeAll": [
    "editor.action.changeAll when editorTextFocus && editorTextFocus && !editorReadonly"
  ],
  "undo": ["undo"],
  "redo": ["redo"],
  "workbench.action.debug.restart": [
    "workbench.action.debug.restart when inDebugMode"
  ],
  "editor.debug.action.selectionToRepl": [
    "editor.debug.action.selectionToRepl"
  ],
  "workbench.debug.action.toggleRepl": [
    "workbench.debug.action.toggleRepl when debuggersAvailable"
  ],
  "workbench.action.tasks.build": ["workbench.action.tasks.build"],
  "workbench.action.tasks.runTask": ["workbench.action.tasks.runTask"],
  "workbench.action.tasks.reRunTask": ["workbench.action.tasks.reRunTask"],
  "copyFilePath": ["copyFilePath when !editorFocus"],
  "workbench.view.explorer": ["workbench.view.explorer"],
  "editor.action.dirtydiff.next": [
    "editor.action.dirtydiff.next when editorTextFocus"
  ],
  "editor.action.dirtydiff.previous": [
    "editor.action.dirtydiff.previous when editorTextFocus"
  ],
  "git.commitAll": ["git.commitAll"],
  "git.pushTo": ["git.pushTo"],
  "git.revertSelectedRanges": ["git.revertSelectedRanges when isInDiffEditor"],
  "git.sync": ["git.sync"],
  "workbench.view.scm": ["workbench.view.scm"],
  "workbench.action.terminal.focus": ["workbench.action.terminal.focus"],
  "workbench.action.terminal.focusNext": [
    "workbench.action.terminal.focusNext"
  ],
  "workbench.action.terminal.focusPrevious": [
    "workbench.action.terminal.focusPrevious"
  ],
  "workbench.action.terminal.toggleTerminal": [
    "workbench.action.terminal.toggleTerminal"
  ],
  "cursorBottom": ["cursorBottom when textInputFocus"],
  "cursorColumnSelectDown": [
    "cursorColumnSelectDown when textInputFocus",
    "cursorColumnSelectDown when editorColumnSelection && textInputFocus"
  ],
  "cursorColumnSelectLeft": [
    "cursorColumnSelectLeft when textInputFocus",
    "cursorColumnSelectLeft when editorColumnSelection && textInputFocus"
  ],
  "cursorColumnSelectPageDown": [
    "cursorColumnSelectPageDown when textInputFocus",
    "cursorColumnSelectPageDown when editorColumnSelection && textInputFocus"
  ],
  "cursorColumnSelectPageUp": [
    "cursorColumnSelectPageUp when textInputFocus",
    "cursorColumnSelectPageUp when editorColumnSelection && textInputFocus"
  ],
  "cursorColumnSelectRight": [
    "cursorColumnSelectRight when textInputFocus",
    "cursorColumnSelectRight when editorColumnSelection && textInputFocus"
  ],
  "cursorColumnSelectUp": [
    "cursorColumnSelectUp when textInputFocus",
    "cursorColumnSelectUp when editorColumnSelection && textInputFocus"
  ],
  "cursorTop": ["cursorTop when textInputFocus"],
  "cursorUndo": ["cursorUndo when textInputFocus"],
  "cursorWordStartRight": ["cursorWordStartRight"],
  "cursorWordStartRightSelect": ["cursorWordStartRightSelect"],
  "editor.action.addSelectionToNextFindMatch": [
    "editor.action.addSelectionToNextFindMatch when editorFocus"
  ],
  "editor.action.goToTypeDefinition": ["editor.action.goToTypeDefinition"],
  "editor.action.referenceSearch.trigger": [
    "editor.action.referenceSearch.trigger"
  ],
  "editor.action.selectHighlights": [
    "editor.action.selectHighlights when editorFocus"
  ],
  "editor.action.showHover": ["editor.action.showHover when editorTextFocus"],
  "editor.action.startFindReplaceAction": [
    "editor.action.startFindReplaceAction when editorFocus || editorIsOpen"
  ],
  "editor.action.toggleColumnSelection": [
    "editor.action.toggleColumnSelection"
  ],
  "editor.action.toggleRenderWhitespace": [
    "editor.action.toggleRenderWhitespace"
  ],
  "editor.action.triggerParameterHints": [
    "editor.action.triggerParameterHints when editorHasSignatureHelpProvider && editorTextFocus"
  ],
  "editor.action.triggerSuggest": [
    "editor.action.triggerSuggest when editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
  ],
  "editor.debug.action.runToCursor": ["editor.debug.action.runToCursor"],
  "editor.foldRecursively": [
    "editor.foldRecursively when editorTextFocus && foldingEnabled"
  ],
  "editor.unfold": ["editor.unfold when editorTextFocus && foldingEnabled"],
  "editor.unfoldAll": [
    "editor.unfoldAll when editorTextFocus && foldingEnabled"
  ],
  "editor.unfoldRecursively": [
    "editor.unfoldRecursively when editorTextFocus && foldingEnabled"
  ],
  "references-view.find": ["references-view.find"],
  "workbench.action.compareEditor.nextChange": [
    "workbench.action.compareEditor.nextChange when textCompareEditorVisible"
  ],
  "workbench.action.compareEditor.previousChange": [
    "workbench.action.compareEditor.previousChange when textCompareEditorVisible"
  ],
  "workbench.action.files.openFileFolder": [
    "workbench.action.files.openFileFolder"
  ],
  "workbench.action.focusNextGroup": ["workbench.action.focusNextGroup"],
  "workbench.action.focusPreviousGroup": [
    "workbench.action.focusPreviousGroup"
  ],
  "workbench.action.maximizeEditor": ["workbench.action.maximizeEditor"],
  "workbench.action.openGlobalSettings": [
    "workbench.action.openGlobalSettings"
  ],
  "workbench.action.output.toggleOutput": [
    "workbench.action.output.toggleOutput"
  ],
  "workbench.action.previousEditor": ["workbench.action.previousEditor"],
  "workbench.action.quickOpenNavigateNext": [
    "workbench.action.quickOpenNavigateNext"
  ],
  "workbench.action.replaceInFiles": ["workbench.action.replaceInFiles"],
  "workbench.action.selectTheme": ["workbench.action.selectTheme"],
  "workbench.action.showAllSymbols": ["workbench.action.showAllSymbols"],
  "workbench.action.showCommands": ["workbench.action.showCommands"],
  "workbench.action.showErrorsWarnings": [
    "workbench.action.showErrorsWarnings"
  ],
  "workbench.action.sync": ["workbench.action.sync"],
  "workbench.actions.view.problems": ["workbench.actions.view.problems"],
  "workbench.debug.viewlet.action.addFunctionBreakpointAction": [
    "workbench.debug.viewlet.action.addFunctionBreakpointAction"
  ],
  "workbench.debug.viewlet.action.removeAllBreakpoints": [
    "workbench.debug.viewlet.action.removeAllBreakpoints"
  ],
  "workbench.view.debug": ["workbench.view.debug"],
  "workbench.view.search": ["workbench.view.search when !searchViewletVisible"]
}

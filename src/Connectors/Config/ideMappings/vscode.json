{
  "formatDocument": [
    "editor.action.formatDocument when editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly && !inCompositeEditor",
    "editor.action.formatDocument when editorTextFocus && !editorHasDocumentFormattingProvider && !editorReadonly"
  ],
  "formatSelection": [
    "editor.action.formatSelection when editorHasDocumentSelectionFormattingProvider && editorHasDocumentSelectionFormattingProvider && editorTextFocus && !editorReadonly"
  ],
  "goToFile": ["workbench.action.quickOpen"],
  "renameFile": [
    "renameFile when explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  ],
  "renameSymbol": [
    "editor.action.rename when editorHasRenameProvider && editorTextFocus && !editorReadonly"
  ],
  "cutLine": [
    "filesExplorer.cut when explorerViewletVisible && filesExplorerFocus && !explorerResourceIsRoot && !inputFocus"
  ],
  "copyLine": ["editor.action.clipboardCopyAction"],
  "deleteLine": [
    "editor.action.deleteLines when textInputFocus && !editorReadonly"
  ],
  "insertLineAbove": [
    "editor.action.insertLineBefore when editorTextFocus && !editorReadonly"
  ],
  "insertLineBelow": [
    "editor.action.insertLineAfter when editorTextFocus && !editorReadonly"
  ],
  "moveLineUp": [
    "editor.action.moveLinesUpAction when editorTextFocus && !editorReadonly"
  ],
  "moveLineDown": [
    "editor.action.moveLinesDownAction when editorTextFocus && !editorReadonly"
  ],
  "indent": [
    "tab when editorTextFocus && !editorReadonly && !editorTabMovesFocus"
  ],
  "outdent": [
    "outdent when editorTextFocus && !editorReadonly && !editorTabMovesFocus"
  ],
  "indentLine": [
    "editor.action.indentLines when editorTextFocus && !editorReadonly"
  ],
  "outdent line": [
    "editor.action.outdentLines when editorTextFocus && !editorReadonly"
  ],
  "find": ["actions.find when editorFocus || editorIsOpen"],
  "findNext": ["editor.action.nextMatchFindAction when editorFocus"],
  "findPrevious": ["editor.action.previousMatchFindAction when editorFocus"],
  "replace": [
    "editor.action.startFindReplaceAction when editorFocus || editorIsOpen"
  ],
  "toggleBreakpoint": [
    "editor.debug.action.toggleBreakpoint when debuggersAvailable && editorTextFocus"
  ],
  "start": [
    "workbench.action.debug.start when debuggersAvailable && !inDebugMode"
  ],
  "continue": ["workbench.action.debug.continue when inDebugMode"],
  "stopDebuging": ["workbench.action.debug.stop when inDebugMode"],
  "stepInto": ["workbench.action.debug.stepInto when debugState != 'inactive'"],
  "stepOut": ["workbench.action.debug.stepOut when debugState == 'stopped'"],
  "showHover": [
    "editor.debug.action.showDebugHover when editorTextFocus && inDebugMode"
  ],
  "newFile": ["workbench.action.files.newUntitledFile"],
  "openFile": ["workbench.action.files.openFile"],
  "save": ["workbench.action.files.save"],
  "saveAs": ["workbench.action.files.saveAs"],
  "saveAll": ["workbench.action.files.saveAll"],
  "close": [],
  "closeAll": [],
  "duplicateSelection": ["editor.action.duplicateSelection"]
}
